import { dateIndexer, datePathefier } from "../src/date-indexer";
import { Indexable } from "../src/indexable";
import { Log } from "../packages/ts-util/src/log";

const log = new Log({ disable: true });
const debug = false;

describe("Date indexer test.", () => {
  test("datePathefier(): should create the correct format.", () => {
    const date = new Date(1625109749836).getTime();
    expect(datePathefier(date) === "2021-7-1").toBe(true);
  });

  test("dateIndexer(): should create the correct dates of the index list.", () => {
    const func = "dateIndexer";
    const test = new Date(1625109749836);
    const ans = [
      "2021-7-1",
      "2021-7-2",
      "2021-7-3",
      "2021-7-4",
      "2021-7-5",
      "2021-7-6",
    ];

    const ar1 = dateIndexer(test.getTime(), 5);
    if (debug) console.log(func, ar1);
    expect(ar1).toEqual(ans);
  });

  test("Indexable dates ().", () => {
    const ans = {
      currentDate: "2021-8-14",
      day1: ["2021-8-14", "2021-8-15"],
      day2: ["2021-8-14", "2021-8-15", "2021-8-16"],
      day3: ["2021-8-14", "2021-8-15", "2021-8-16", "2021-8-17"],
      day5: [
        "2021-8-14",
        "2021-8-15",
        "2021-8-16",
        "2021-8-17",
        "2021-8-18",
        "2021-8-19",
      ],
      week1: [
        "2021-8-14",
        "2021-8-15",
        "2021-8-16",
        "2021-8-17",
        "2021-8-18",
        "2021-8-19",
        "2021-8-20",
        "2021-8-21",
      ],
      week2: [
        "2021-8-14",
        "2021-8-15",
        "2021-8-16",
        "2021-8-17",
        "2021-8-18",
        "2021-8-19",
        "2021-8-20",
        "2021-8-21",
        "2021-8-22",
        "2021-8-23",
        "2021-8-24",
        "2021-8-25",
        "2021-8-26",
        "2021-8-27",
        "2021-8-28",
      ],
      month1: [
        "2021-8-14",
        "2021-8-15",
        "2021-8-16",
        "2021-8-17",
        "2021-8-18",
        "2021-8-19",
        "2021-8-20",
        "2021-8-21",
        "2021-8-22",
        "2021-8-23",
        "2021-8-24",
        "2021-8-25",
        "2021-8-26",
        "2021-8-27",
        "2021-8-28",
        "2021-8-29",
        "2021-8-30",
        "2021-8-31",
        "2021-9-1",
        "2021-9-2",
        "2021-9-3",
        "2021-9-4",
        "2021-9-5",
        "2021-9-6",
        "2021-9-7",
        "2021-9-8",
        "2021-9-9",
        "2021-9-10",
        "2021-9-11",
        "2021-9-12",
        "2021-9-13",
      ],
      month3: [
        "2021-8-14",
        "2021-8-15",
        "2021-8-16",
        "2021-8-17",
        "2021-8-18",
        "2021-8-19",
        "2021-8-20",
        "2021-8-21",
        "2021-8-22",
        "2021-8-23",
        "2021-8-24",
        "2021-8-25",
        "2021-8-26",
        "2021-8-27",
        "2021-8-28",
        "2021-8-29",
        "2021-8-30",
        "2021-8-31",
        "2021-9-1",
        "2021-9-2",
        "2021-9-3",
        "2021-9-4",
        "2021-9-5",
        "2021-9-6",
        "2021-9-7",
        "2021-9-8",
        "2021-9-9",
        "2021-9-10",
        "2021-9-11",
        "2021-9-12",
        "2021-9-13",
        "2021-9-14",
        "2021-9-15",
        "2021-9-16",
        "2021-9-17",
        "2021-9-18",
        "2021-9-19",
        "2021-9-20",
        "2021-9-21",
        "2021-9-22",
        "2021-9-23",
        "2021-9-24",
        "2021-9-25",
        "2021-9-26",
        "2021-9-27",
        "2021-9-28",
        "2021-9-29",
        "2021-9-30",
        "2021-10-1",
        "2021-10-2",
        "2021-10-3",
        "2021-10-4",
        "2021-10-5",
        "2021-10-6",
        "2021-10-7",
        "2021-10-8",
        "2021-10-9",
        "2021-10-10",
        "2021-10-11",
        "2021-10-12",
        "2021-10-13",
        "2021-10-14",
        "2021-10-15",
        "2021-10-16",
        "2021-10-17",
        "2021-10-18",
        "2021-10-19",
        "2021-10-20",
        "2021-10-21",
        "2021-10-22",
        "2021-10-23",
        "2021-10-24",
        "2021-10-25",
        "2021-10-26",
        "2021-10-27",
        "2021-10-28",
        "2021-10-29",
        "2021-10-30",
        "2021-10-31",
        "2021-11-1",
        "2021-11-2",
        "2021-11-3",
        "2021-11-4",
        "2021-11-5",
        "2021-11-6",
        "2021-11-7",
        "2021-11-8",
        "2021-11-9",
        "2021-11-10",
        "2021-11-11",
        "2021-11-12",
      ],
    };

    const i = new Indexable().dates(new Date(2021, 7, 14).getTime());
    if (debug) console.log(i);
    if (debug) log.print(null, i);

    expect(i.currentDate).toEqual(ans.currentDate);
    expect(i.week1).toEqual(ans.week1);
    expect(i.week2).toEqual(ans.week2);
    expect(i.month1).toEqual(ans.month1);
    expect(i.month3).toEqual(ans.month3);

    for (let x = 1; x < Object.keys(i).length; x++) {
      expect((i as any)["day" + x.toString()]).toEqual(
        (ans as any)["day" + x.toString()]
      );
    }
  });
});
